# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  terraform: circleci/terraform@3.2.1
#   node: circleci/node@5.1.0
#   python: circleci/python@2.1.1
#   docker: circleci/docker@2.4.0

# commands:
  # stop-container:
  #   description: Stops Container and removes Image
  #   steps:
  #     - run:
  #         name: Clean Environment
  #         when: on_fail
  #         command: |
  #           docker stop $(ps -a -q)
  #           docker rm $(ps -a -q)
  #           docker rmi $(docker images -q)

# jobs:
  # plan-apply:
  #   working_directory: ../terraform
  #   docker:
  #     - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
  #   steps:
  #     - checkout
  #     - run:
  #         name: terraform init & plan
  #         command: |
  #           terraform init -input=false
  #           terraform plan -out tfapply ./
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .

  # apply:
  #   docker:
  #     - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #          name: terraform apply
  #          command: |
  #           terraform apply -auto-approve tfapply
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .

  # plan-destroy:
  #   docker:
  #     - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: terraform create destroy plan
  #         command: |
  #           terraform plan -destroy -out tfdestroy ./
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .

  # destroy:
  #   docker:
  #     - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #          name: terraform destroy
  #          command: |
  #           terraform destroyy -auto-approve tfdestroy
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .
  # frontend_test:
  #   executor: node/default
  #   steps:
  #     - checkout
  #     - node/install-packages:
  #         pkg-manager: npm
  #     - run:
  #         command: npm run lint
  #         name: Run tests
  #     - persist_to_workspace:
  #         root: ./
  #         paths:
  #           - .
  # backend_test:
  #   executor: python/default
  #   steps:
  #     - checkout
  #     - python/install-packages:
  #         pkg-manager: pip
  #     - run:
  #         command: pip install pylint && pylint main.py
  #         name: Run tests
  #     - persist_to_workspace:
  #         root: ./
  #         paths:
  #           - .
  # lint-frontend-dockerfile:
  #   executor: docker/machine
  #   steps:
  #     - checkout
  #     - docker/dockerlint:
  #         dockerfile: web.Dockerfile
  #         treat-warnings-as-errors: true
  
  # lint-backend-dockerfile:
  #   executor: docker/machine
  #   steps:
  #     - checkout
  #     - docker/dockerlint:
  #         dockerfile: api.Dockerfile
  #         treat-warnings-as-errors: true


  # docker-compose:
  #   executor: docker/machine
  #   steps:
  #     - checkout
  #     - run:
  #         name: Login for Docker Hub
  #         command: | 
  #           echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
  #     - run:
  #         name: Start Docker Compose
  #         command: |
  #           docker compose up --build -d
  #     - stop-container
  #     - run:
  #         name: Push Images
  #         command: |
  #           docker compose push
  
  # create-cluster:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
      # - run:
      #     name: Install Kubectl and Eksctl
      #     command: |
      #       chmod u+x install-dep.sh
      #       bash install-dep.sh
      # - run:
      #     name: Creating K8S cluster
      #     command: |
      #       echo
      #       chmod u+x k8-cluster.sh
      #       bash k8-cluster.sh
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - .
      # - run:
      #     name: Deploying application
      #     command: |
      #         kubectl apply -f deployment/backend-service.yml
      #         kubectl apply -f deployment/backend.yml
      #         kubectl apply -f deployment/frontend-service.yml
      #         kubectl apply -f deployment/frontend.yml
      # - destroy-cluster
      # - run:
      #     name: Delete Cluster
      #     command: |
      #       chmod u+x del-cluster.sh
      #       bash del-cluster.sh
      #     when: on_fail

workflows:
  deploy:
    jobs:
      - terraform/fmt:
          checkout: true
          context: terraform
      - terraform/validate:
          checkout: true
          context: terraform
          requires:
            - terraform/fmt
      - terraform/plan:
          checkout: true
          context: terraform
          requires:
            - terraform/validate
      - terraform/apply:
          attach-workspace: true
          context: terraform
          requires:
            - terraform/plan
      - terraform/destroy:
          attach-workspace: true
          context: terraform
          requires:
            - terraform/apply
          type: approval
    # - plan-apply
    # - hold-apply:
    #     type: approval
    #     requires:
    #       - plan-apply
    # - apply:
    #     requires:
    #     - hold-apply
    # - plan-destroy:
    #     requires:
    #       - apply
    # - hold-destroy:
    #     type: approval
    #     requires:
    #       - plan-destroy
    # - destroy:
    #     requires:
    #     - hold-destroy
    # - frontend_test
    # - backend_test
    # - lint-frontend-dockerfile
    # - lint-backend-dockerfile
    # - docker-compose:
    #     requires:
    #     - lint-frontend-dockerfile
    #     - lint-backend-dockerfile
    #     - frontend_test
    #     - backend_test
    # - create-cluster
        # requires:
        # - docker-compose